name: Build LaTeX and Deploy to GitHub Pages

on:
  push:
    branches: [ main, claude ]
  pull_request:
    branches: [ main, claude ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache LaTeX packages
      uses: actions/cache@v4
      with:
        path: ~/texlive-cache
        key: ${{ runner.os }}-latex-packages-v4
        restore-keys: |
          ${{ runner.os }}-latex-packages-
    
    - name: Install TeX Live (minimal)
      run: |
        # Check if cached LaTeX installation exists
        if [ -f "$HOME/texlive-cache/.installed" ]; then
          echo "LaTeX already cached, skipping installation"
        else
          echo "Installing LaTeX packages..."
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            texlive-latex-base \
            texlive-latex-recommended \
            texlive-fonts-recommended \
            texlive-latex-extra \
            texlive-fonts-extra \
            texlive-lmodern  # Add this line for lmodern package
          # Mark as installed for caching
          mkdir -p ~/texlive-cache
          touch ~/texlive-cache/.installed
        fi
    

    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        cache-version: 1
    
    - name: Create Gemfile if it doesn't exist
      run: |
        if [ ! -f Gemfile ]; then
          cat > Gemfile << EOF
        source "https://rubygems.org"
        gem "jekyll", "~> 4.3"
        gem "minima", "~> 2.5"
        gem "webrick", "~> 1.7"
        EOF
        fi
    
    - name: Install Jekyll dependencies
      run: |
        # Check if gems are already installed
        if ! bundle check &> /dev/null; then
          echo "Installing Jekyll dependencies..."
          bundle install
        else
          echo "Jekyll dependencies already satisfied"
        fi
    
    - name: Build PDF from LaTeX
      run: |
        # Change to tex-source directory
        cd tex-source
        
        # Build PDF from LaTeX files in tex-source folder
        if [ -f "main.tex" ]; then
          pdflatex main.tex
          pdflatex main.tex  # Run twice for references
        elif [ -f "document.tex" ]; then
          pdflatex document.tex
          pdflatex document.tex
        else
          echo "No LaTeX file found in tex-source directory. Please ensure you have a .tex file in tex-source/."
          exit 1
        fi
        
        # Move PDF to Jekyll assets directory (back to root level)
        cd ..
        mkdir -p assets
        mv tex-source/*.pdf assets/ 2>/dev/null || true
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Create Jekyll site structure
      run: |
        # Create basic Jekyll structure if it doesn't exist
        if [ ! -f "_config.yml" ]; then
          cat > _config.yml << EOF
        title: LaTeX Document Site
        description: Auto-generated site with LaTeX PDF
        baseurl: ""
        url: "https://${{ github.repository_owner }}.github.io"
        
        markdown: kramdown
        highlighter: rouge
        
        plugins:
          - jekyll-feed
        EOF
        fi
        
        if [ ! -f "index.md" ]; then
          cat > index.md << EOF
        ---
        layout: default
        title: Home
        ---
        
        # LaTeX Document
        
        Your PDF has been automatically generated and is available below:
        
        {% for file in site.static_files %}
          {% if file.extname == '.pdf' %}
        - [{{ file.name }}]({{ file.path }})
          {% endif %}
        {% endfor %}
        
        This site is automatically updated when changes are pushed to the repository.
        EOF
        fi
    
    - name: Build Jekyll site
      run: bundle exec jekyll build
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4