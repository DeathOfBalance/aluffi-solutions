# .github/workflows/build-latex.yml (Revised)

name: Build LaTeX Solutions and Publish

on:
  push:
    branches:
      - main
      - test

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      TEX_ROOT: tex-source # Adjust this to your main solutions directory
      JEKYLL_ROOT: docs      # The folder where your Jekyll site lives

    steps:
    - name: Checkout repository
      # Checks out your repository code so the workflow can access it
      uses: actions/checkout@v4

    - name: Cache TinyTeX Installation
      uses: actions/cache@v4
      with:
        path: ~/.TinyTeX
        # CORRECTED LINE BELOW:
        key: ${{ runner.os }}-tinytex-${{ hashFiles('${{ env.TEX_ROOT}}/latex_packages.txt') }}
        restore-keys: |
          ${{ runner.os }}-tinytex-

    - name: Set up TinyTeX
      # This action will detect if TinyTeX is already present (from cache)
      # and use the cached version instead of installing from scratch.
      uses: r-lib/actions/setup-tinytex@v2
      # No 'with:' inputs needed here, as caching is handled by actions/cache.

    - name: Install LaTeX Packages
      # This step runs AFTER TinyTeX is set up (or restored from cache).
      # It will only install packages that are truly missing.
      run: |
        echo "Updating tlmgr itself..."
        # We use 'true' to ensure this step doesn't fail the whole job if self-update has a minor hiccup.
        tlmgr update --self || true

        echo "Installing LaTeX packages from ${{ env.TEX_ROOT }}/latex_packages.txt..."
        # Loop through each package in latex_packages.txt and install it.
        # This is more robust and ensures only what's listed is installed.
        while IFS= read -r package; do
          if [ -n "$package" ]; then # Ensure line is not empty
            echo "Attempting to install: $package"
            # Use 'tlmgr install --reinstall-forcibly-removed' to ensure packages are truly there
            # even if a previous clean-up or partial install somehow removed them.
            # Adding || true to prevent individual package install failures from stopping the whole step.
            tlmgr install "$package" || true
          fi
        done < ${{ env.TEX_ROOT }}/latex_packages.txt
        
        echo "LaTeX package installation complete."

    - name: Create directory for generated PDFs
      # Creates the folder where the compiled PDF will temporarily reside
      run: mkdir -p ${{ github.workspace }}/generated-pdfs

    - name: Compile Main LaTeX Document to PDF
      # IMPORTANT: This step will now execute from within the TEX_ROOT directory.
      working-directory: ${{ env.TEX_ROOT }} # <--- ADD THIS LINE HERE
      run: |
        # In this step, 'main.tex' is now relative to the working-directory (tex-source/).
        MAIN_TEX_FILE="main.tex"
        
        # Define a temporary output directory *relative to the working-directory*
        # for latexmk's intermediate and final files.
        TEMP_LATEX_OUTPUT_DIR="latex_build_temp"
        mkdir -p "$TEMP_LATEX_OUTPUT_DIR"

        # The final target directory for the PDF, relative to the *repository root*
        FINAL_PDF_OUTPUT_DIR="${{ github.workspace }}/generated-pdfs"
        OUTPUT_PDF_NAME="aluffi-solutions-book.pdf"

        echo "Compiling $MAIN_TEX_FILE from ${{ env.TEX_ROOT }} and outputting to $FINAL_PDF_OUTPUT_DIR/$OUTPUT_PDF_NAME..."
        
        # Compile using latexmk, outputting auxiliary files and main.pdf to TEMP_LATEX_OUTPUT_DIR
        latexmk -pdf -outdir="$TEMP_LATEX_OUTPUT_DIR" "$MAIN_TEX_FILE"

        # Ensure the final output directory exists for the move
        mkdir -p "$FINAL_PDF_OUTPUT_DIR"
        
        # Move the compiled PDF from the temporary location to the final desired location
        mv "$TEMP_LATEX_OUTPUT_DIR/main.pdf" "$FINAL_PDF_OUTPUT_DIR/$OUTPUT_PDF_NAME"

        # Clean up auxiliary files from the temporary output directory
        latexmk -c -outdir="$TEMP_LATEX_OUTPUT_DIR" "$MAIN_TEX_FILE"
        rm -rf "$TEMP_LATEX_OUTPUT_DIR" # Remove the temporary directory itself

    - name: Copy generated PDFs into Jekyll site assets
      run: |
        JEKYLL_ASSETS_DIR="${{ github.workspace }}/${{ env.JEKYLL_ROOT }}/assets/solutions/"
        mkdir -p "$JEKYLL_ASSETS_DIR"
        # Copy the single generated PDF
        cp ${{ github.workspace }}/generated-pdfs/aluffi-solutions-book.pdf "$JEKYLL_ASSETS_DIR"


    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.4' # Use a recent stable Ruby version, e.g., '3.2' or '3.3'
        bundler-cache: true # runs 'bundle install' and caches gems
        cache-version: 1 # Increment this number if you change Gemfile.lock

    - name: List contents of Jekyll directory # Re-adding for re-confirmation
      run: ls -lR
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Install Ruby Gems (explicitly ensure 'jekyll' executable is found)
      # This step explicitly runs 'bundle install' to ensure all gems are
      # correctly installed and available for 'bundle exec'.
      # 'bundle config path vendor/bundle' installs gems into a local directory,
      # which can sometimes be more robust for CI environments.
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3 # --jobs for faster install, --retry for robustness
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Diagnose Ruby/Jekyll Setup (Optional, for debugging)
      run: |
        echo "Current directory: $(pwd)"
        # CORRECTED `ls` command for Gemfile.lock within `docs/` working directory
        echo "Contents of Gemfile.lock: $(ls Gemfile.lock || echo 'Gemfile.lock not found')"
        echo "Bundler version: $(bundle --version)"
        echo "Jekyll executable location: $(bundle exec which jekyll || echo 'Jekyll executable not found via bundle exec')"
        echo "PATH: $PATH"
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Build Jekyll site
      run: |
        echo "Attempting to build Jekyll site..."
        bundle exec jekyll build --trace # This should now find jekyll
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ github.workspace }}/${{ env.JEKYLL_ROOT }}/_site # Publish Jekyll's output directory
        # cname: your-custom-domain.com # Optional: if you have a custom domain