name: Build LaTeX PDF and Deploy Jekyll

on:
  push:
    branches:
      - main
      - actions

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: # <--- ADD THIS BLOCK
      contents: write # Allows GITHUB_TOKEN to write to the repository
      pages: write    # Allows GITHUB_TOKEN to deploy to GitHub Pages
      id-token: write # Required for OpenID Connect authentication, good practice for Pages deployments

    env:
      TEX_ROOT: tex-source
      JEKYLL_ROOT: docs
      PDF_OUTPUT_NAME: aluffi-solutions-book.pdf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache TinyTeX
        uses: actions/cache@v3
        with:
          path: ~/.TinyTeX
          key: texlive-${{ runner.os }}-v1

      - name: Install TinyTeX
        uses: r-lib/actions/setup-tinytex@v2

      - name: Install required LaTeX packages
        run: |
          tlmgr install \
            collection-fontsrecommended \
            collection-latexrecommended \
            latexmk \
            mathtools


      - name: Compile LaTeX document with latexmk
        working-directory: ${{ env.TEX_ROOT }}
        run: |
          mkdir -p ../generated-pdfs
          latexmk -pdf -interaction=nonstopmode -outdir=build main.tex
          mv build/main.pdf ../generated-pdfs/${{ env.PDF_OUTPUT_NAME }}
          latexmk -c -outdir=build main.tex

      - name: Copy generated PDF to Jekyll assets
        run: |
          mkdir -p ${{ env.JEKYLL_ROOT }}/assets/solutions
          cp generated-pdfs/${{ env.PDF_OUTPUT_NAME }} ${{ env.JEKYLL_ROOT }}/assets/solutions/

      - name: Setup Ruby for Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Install Jekyll dependencies
        working-directory: ${{ env.JEKYLL_ROOT }}
        run: bundle install

      - name: Build Jekyll site
        working-directory: ${{ env.JEKYLL_ROOT }} # This is 'docs'
        run: bundle exec jekyll build

      # --- NEW DIAGNOSTIC STEPS ---
      - name: Verify Jekyll _site directory contents
        run: |
          echo "--- Contents of the Jekyll root directory (${{ env.JEKYLL_ROOT }}/): ---"
          ls -F ${{ env.JEKYLL_ROOT }}

          echo "--- Contents of the Jekyll _site directory (${{ env.JEKYLL_ROOT }}/_site/): ---"
          # This command will list contents if _site exists, or print an error if it doesn't
          ls -F ${{ env.JEKYLL_ROOT }}/_site || echo "Error: ${{ env.JEKYLL_ROOT }}/_site directory not found or empty."

          echo "--- Checking for Jekyll build errors (last 20 lines of build log): ---"
          # This tries to capture recent build output from Jekyll for errors.
          # Note: this might not capture all Jekyll errors if they happen earlier or are swallowed.
          # For more verbose debugging, you could temporarily add --verbose to the jekyll build command.
          tail -n 20 /tmp/jekyll_build.log || echo "No /tmp/jekyll_build.log found or file is smaller than 20 lines."
        working-directory: ${{ github.workspace }} # Run from repository root to easily access docs/
        # Make sure the 'Build Jekyll site' step pipes its output to a log file if you want to inspect it.
        # For simplicity, we'll just check `ls` and rely on default error output for now.

      # --- END NEW DIAGNOSTIC STEPS ---

      - name: Deploy Jekyll site to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.JEKYLL_ROOT }}/_site
