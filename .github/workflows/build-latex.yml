name: Build LaTeX PDF and Deploy Jekyll

on:
  push:
    branches:
      - main
      - cache

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: # <--- ADD THIS BLOCK
      contents: write # Allows GITHUB_TOKEN to write to the repository
      pages: write    # Allows GITHUB_TOKEN to deploy to GitHub Pages
      id-token: write # Required for OpenID Connect authentication, good practice for Pages deployments

    env:
      TEX_ROOT: tex-source
      JEKYLL_ROOT: docs
      PDF_OUTPUT_NAME: aluffi-solutions-book.pdf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache TinyTeX
        id: cache-tinytex # Add an ID to reference outputs
        uses: actions/cache@v3
        with:
          path: ~/.TinyTeX
          key: texlive-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}-v1
          restore-keys: |
            texlive-${{ runner.os }}-v1

      # Conditionally install TinyTeX only if the cache did NOT hit
      - name: Install TinyTeX (if not cached)
        if: steps.cache-tinytex.outputs.cache-hit != 'true'
        run: |
          # Install TinyTeX directly, similar to what setup-tinytex does initially
          wget -qO- "https://yihui.org/tinytex/install-bin-unix.sh" | sh
          # It's still a good idea to ensure tlmgr itself is up-to-date
          # We'll put this update here, which only runs on a cache miss (new install)
          echo "Updating tlmgr self (only on initial install)..."
          ~/.TinyTeX/bin/x86_64-linux/tlmgr update --self || true # Use || true to prevent crash if update fails for some reason
          echo "tlmgr updated to latest version."

      # Always ensure TinyTeX is on PATH for subsequent steps
      - name: Add TinyTeX to PATH
        run: |
          echo "PATH=$HOME/.TinyTeX/bin/x86_64-linux:$PATH" >> $GITHUB_ENV
          # Optional: set MANPATH and INFOPATH if your LaTeX source depends on them
          # echo "MANPATH=$HOME/.TinyTeX/texmf-dist/doc/man:$MANPATH" >> $GITHUB_ENV
          # echo "INFOPATH=$HOME/.TinyTeX/texmf-dist/doc/info:$INFOPATH" >> $GITHUB_ENV

      - name: Install required LaTeX packages
        run: |
          echo "--- Running tlmgr install ---"
          # Removed --no-self-update as it's not supported by your tlmgr version.
          # tlmgr will perform its normal checks. On a cache hit, it should still be fast
          # because packages are already there.
          tlmgr install \
            collection-fontsrecommended \
            collection-latexrecommended \
            mathtools \
            enumitem \
            lipsum \
            tcolorbox \
            pdfcol


      - name: Compile LaTeX document with latexmk
        working-directory: ${{ env.TEX_ROOT }}
        run: |
          mkdir -p ../generated-pdfs
          latexmk -pdf -interaction=nonstopmode -outdir=build main.tex
          mv build/main.pdf ../generated-pdfs/${{ env.PDF_OUTPUT_NAME }}
          latexmk -c -outdir=build main.tex
      - name: Copy generated PDF to Jekyll assets
        run: |
          mkdir -p ${{ env.JEKYLL_ROOT }}/assets/solutions
          cp generated-pdfs/${{ env.PDF_OUTPUT_NAME }} ${{ env.JEKYLL_ROOT }}/assets/solutions/
      - name: Setup Ruby for Jekyll
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          # bundler-cache: true

      # Cache Ruby Gems (Jekyll Dependencies)
      - name: Cache Ruby Gems
        id: cache-ruby-gems # Add an ID to reference outputs for conditional steps
        uses: actions/cache@v3
        with:
          path: ${{ env.JEKYLL_ROOT }}/vendor/bundle # Explicitly cache Bundler's local install dir
          key: ${{ runner.os }}-ruby-${{ hashFiles(format('{0}/Gemfile.lock', env.JEKYLL_ROOT)) }}
          restore-keys: |
            ${{ runner.os }}-ruby-

      - name: Install Jekyll dependencies
        working-directory: ${{ env.JEKYLL_ROOT }}
        run: |
          echo "--- Installing Jekyll dependencies ---"
          # Install gems locally to vendor/bundle for better caching
          bundle config set --local path vendor/bundle
          # Install using bundle install
          # If cache hit, this should be very fast.
          # If cache miss, it will install all gems.
          bundle install --jobs 4 --retry 3 # Add common optimization flags

      - name: Build Jekyll site
        working-directory: ${{ env.JEKYLL_ROOT }} # This is 'docs'
        run: bundle exec jekyll build

      # --- NEW DIAGNOSTIC STEPS ---
      - name: Verify Jekyll _site directory contents
        run: |
          echo "--- Contents of the Jekyll root directory (${{ env.JEKYLL_ROOT }}/): ---"
          ls -F ${{ env.JEKYLL_ROOT }}
          echo "--- Contents of the Jekyll _site directory (${{ env.JEKYLL_ROOT }}/_site/): ---"
          # This command will list contents if _site exists, or print an error if it doesn't
          ls -F ${{ env.JEKYLL_ROOT }}/_site || echo "Error: ${{ env.JEKYLL_ROOT }}/_site directory not found or empty."
          echo "--- Checking for Jekyll build errors (last 20 lines of build log): ---"
          # This tries to capture recent build output from Jekyll for errors.
          # Note: this might not capture all Jekyll errors if they happen earlier or are swallowed.
          # For more verbose debugging, you could temporarily add --verbose to the jekyll build command.
          tail -n 20 /tmp/jekyll_build.log || echo "No /tmp/jekyll_build.log found or file is smaller than 20 lines."
        working-directory: ${{ github.workspace }} # Run from repository root to easily access docs/
        # Make sure the 'Build Jekyll site' step pipes its output to a log file if you want to inspect it.
        # For simplicity, we'll just check `ls` and rely on default error output for now.

      # --- END NEW DIAGNOSTIC STEPS ---

      - name: Deploy Jekyll site to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.JEKYLL_ROOT }}/_site