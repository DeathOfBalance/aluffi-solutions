# .github/workflows/build-latex.yml (Revised)

name: Build LaTeX Solutions and Publish

on:
  push:
    branches:
      - main
      - test

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      TEX_ROOT: tex-source # Adjust this to your main solutions directory
      JEKYLL_ROOT: docs      # The folder where your Jekyll site lives

    steps:
    - name: Checkout repository
      # Checks out your repository code so the workflow can access it
      uses: actions/checkout@v4

    # === CORRECTED TeX LIVE SETUP ===
    # === NEW CACHING STEP FOR TinyTeX ===
    - name: Cache TinyTeX
      uses: actions/cache@v4 # Use the generic caching action
      with:
        path: ~/.TinyTeX # The default installation path for TinyTeX
        key: ${{ runner.os }}-tinytex-${{ hashFiles('.github/workflows/build-latex.yml') }} # Unique cache key
        # You could also use a version or date in the key, e.g.:
        # key: ${{ runner.os }}-tinytex-2025-05-31
        # This key will change if you modify the workflow file, invalidating the cache
        # and forcing a fresh install when needed.
    # === END NEW CACHING STEP ===

    - name: Set up TinyTeX # Now this step will either restore from cache or install fresh
      uses: r-lib/actions/setup-tinytex@v2
      # Remove the 'with: cache: true' line that caused the warning. No 'with' input needed here.

    - name: Install LaTeX Packages
      # Use tlmgr (TeX Live Manager) to install specific packages
      # This step must come AFTER 'Set up TinyTeX'
      run: |
        echo "Updating tlmgr itself..."
        tlmgr update --self || echo "tlmgr self-update failed, continuing anyway..." # Update tlmgr itself first

        echo "Installing core LaTeX collections and latexmk..."
        # Install latexmk separately as it's a tool, not necessarily part of collections
        tlmgr install latexmk

        # These collections should contain amsmath, amssymb, amsthm, and many other common packages
        tlmgr install collection-fontsrecommended
        tlmgr install collection-latexrecommended
        # If your document specifically requires other packages not covered by these collections,
        # list them individually here:
        # tlmgr install graphicx
        # tlmmgr install hyperref
        # tlmgr install caption
        # tlmgr install geometry
        # tlmgr install tikz
        
        # Optional: You can run a full update of all installed packages, but it can be slow
        # echo "Updating all installed LaTeX packages (optional, can be slow)..."
        # tlmgr update --all || echo "tlmgr update --all failed, continuing anyway..."
        
        echo "LaTeX package installation complete."

    - name: Create directory for generated PDFs
      # Creates the folder where the compiled PDF will temporarily reside
      run: mkdir -p ${{ github.workspace }}/generated-pdfs

    - name: Compile Main LaTeX Document to PDF
      # IMPORTANT: This step will now execute from within the TEX_ROOT directory.
      working-directory: ${{ env.TEX_ROOT }} # <--- ADD THIS LINE HERE
      run: |
        # In this step, 'main.tex' is now relative to the working-directory (tex-source/).
        MAIN_TEX_FILE="main.tex"
        
        # Define a temporary output directory *relative to the working-directory*
        # for latexmk's intermediate and final files.
        TEMP_LATEX_OUTPUT_DIR="latex_build_temp"
        mkdir -p "$TEMP_LATEX_OUTPUT_DIR"

        # The final target directory for the PDF, relative to the *repository root*
        FINAL_PDF_OUTPUT_DIR="${{ github.workspace }}/generated-pdfs"
        OUTPUT_PDF_NAME="aluffi-solutions-book.pdf"

        echo "Compiling $MAIN_TEX_FILE from ${{ env.TEX_ROOT }} and outputting to $FINAL_PDF_OUTPUT_DIR/$OUTPUT_PDF_NAME..."
        
        # Compile using latexmk, outputting auxiliary files and main.pdf to TEMP_LATEX_OUTPUT_DIR
        latexmk -pdf -outdir="$TEMP_LATEX_OUTPUT_DIR" "$MAIN_TEX_FILE"

        # Ensure the final output directory exists for the move
        mkdir -p "$FINAL_PDF_OUTPUT_DIR"
        
        # Move the compiled PDF from the temporary location to the final desired location
        mv "$TEMP_LATEX_OUTPUT_DIR/main.pdf" "$FINAL_PDF_OUTPUT_DIR/$OUTPUT_PDF_NAME"

        # Clean up auxiliary files from the temporary output directory
        latexmk -c -outdir="$TEMP_LATEX_OUTPUT_DIR" "$MAIN_TEX_FILE"
        rm -rf "$TEMP_LATEX_OUTPUT_DIR" # Remove the temporary directory itself

    - name: Copy generated PDFs into Jekyll site assets
      run: |
        JEKYLL_ASSETS_DIR="${{ github.workspace }}/${{ env.JEKYLL_ROOT }}/assets/solutions/"
        mkdir -p "$JEKYLL_ASSETS_DIR"
        # Copy the single generated PDF
        cp ${{ github.workspace }}/generated-pdfs/aluffi-solutions-book.pdf "$JEKYLL_ASSETS_DIR"


    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.4' # Use a recent stable Ruby version, e.g., '3.2' or '3.3'
        bundler-cache: true # runs 'bundle install' and caches gems
        cache-version: 1 # Increment this number if you change Gemfile.lock

    - name: Diagnose Ruby/Jekyll Setup (Optional, for debugging)
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of Gemfile.lock in docs/: $(ls docs/Gemfile.lock || echo 'Gemfile.lock not found')"
        echo "Bundler version: $(bundle --version)"
        echo "Jekyll executable location: $(bundle exec which jekyll || echo 'Jekyll executable not found via bundle exec')"
        echo "PATH: $PATH"
      # This step should run from the docs directory to correctly check bundle context
      working-directory: ${{ env.JEKYLL_ROOT }}


    - name: Build Jekyll site
      run: |
        echo "Attempting to build Jekyll site..."
        bundle exec jekyll build --trace # --trace for debugging if needed
      working-directory: ${{ env.JEKYLL_ROOT }} # Ensure this is always set for Jekyll commands

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ github.workspace }}/${{ env.JEKYLL_ROOT }}/_site # Publish Jekyll's output directory
        cname: your-custom-domain.com # Optional: if you have a custom domain