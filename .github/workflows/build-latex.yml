# .github/workflows/build-latex.yml (Pinning Action Version)

name: Build LaTeX Solutions and Publish

on:
  push:
    branches:
      - main
      - test

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      TEX_ROOT: tex-source 
      JEKYLL_ROOT: docs     

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # === PINNED TINYTEX ACTION VERSION ===
    - name: Set up TinyTeX and Cache Key Packages
      # Pinning to a specific v2.x.x version to ensure input compatibility
      uses: r-lib/actions/setup-tinytex@v2.3.0 
      with:
        cache: true
        tlmgr-packages: |
          collection-fontsrecommended
          collection-latexrecommended
          amsmath
          amssymb
          amsthm
          mathtools 
          latexmk
        # Increment cache-version if you change tlmgr-packages or suspect a stale cache
        cache-version: 3 # Incremented due to action version change and to ensure fresh attempt
    # === END PINNED TINYTEX ACTION VERSION ===

    - name: Check Packages After setup-tinytex
      if: always() 
      run: |
        echo "Path: $PATH"
        echo "Which tlmgr: $(which tlmgr)"
        echo "TinyTeX Root: $(dirname $(which tlmgr) | xargs dirname)" 
        echo "Listing tlmgr conf:"
        tlmgr conf
        echo "---"
        echo "Checking for presence of key packages/collections after setup-tinytex step:"
        echo "Attempting to get info for collection-fontsrecommended..."
        tlmgr info collection-fontsrecommended || echo "INFO: collection-fontsrecommended not found or tlmgr info failed after setup-tinytex"
        echo "---"
        echo "Attempting to get info for collection-latexrecommended..."
        tlmgr info collection-latexrecommended || echo "INFO: collection-latexrecommended not found or tlmgr info failed after setup-tinytex"
        echo "---"
        echo "Attempting to get info for mathtools..."
        tlmgr info mathtools || echo "INFO: mathtools not found or tlmgr info failed after setup-tinytex"
        echo "---"
      shell: bash

    - name: Install Additional LaTeX Packages from File
      run: |
        echo "Ensuring all LaTeX packages from ${{ env.TEX_ROOT }}/latex_packages.txt are present..."
        PACKAGE_FILE="${{ env.TEX_ROOT }}/latex_packages.txt"
        
        # IMPORTANT: For this test, ensure latex_packages.txt does NOT list
        # collection-fontsrecommended, collection-latexrecommended, or other packages
        # already specified in the 'tlmgr-packages' of the setup-tinytex step above.
        # This file should only contain *additional* packages.
        if [ -f "$PACKAGE_FILE" ] && [ -s "$PACKAGE_FILE" ]; then
          echo "Packages to install/verify from $PACKAGE_FILE:"
          grep -vE '^\s*#|^\s*$' "$PACKAGE_FILE" || echo "No non-comment packages in file to list."
          grep -vE '^\s*#|^\s*$' "$PACKAGE_FILE" | xargs -r -I {} sh -c 'echo "Attempting to install/verify from file: {}"; tlmgr install "{}" || echo "Notice: Could not install {} from file, or it was already present/a meta-package, or it is part of a collection already installed."'
        else
          echo "No packages listed in $PACKAGE_FILE, or file is empty/not found. Skipping this step."
        fi
        echo "Additional LaTeX package installation process from file complete."

    - name: Create directory for generated PDFs
      run: mkdir -p ${{ github.workspace }}/generated-pdfs

    - name: Compile Main LaTeX Document to PDF
      working-directory: ${{ env.TEX_ROOT }}
      run: |
        MAIN_TEX_FILE="main.tex"
        TEMP_LATEX_OUTPUT_DIR="latex_build_temp"
        mkdir -p "$TEMP_LATEX_OUTPUT_DIR"

        FINAL_PDF_OUTPUT_DIR="${{ github.workspace }}/generated-pdfs"
        OUTPUT_PDF_NAME="aluffi-solutions-book.pdf"

        echo "Compiling $MAIN_TEX_FILE from ${{ env.TEX_ROOT }} and outputting to $FINAL_PDF_OUTPUT_DIR/$OUTPUT_PDF_NAME..."
        
        latexmk -pdf -interaction=nonstopmode -outdir="$TEMP_LATEX_OUTPUT_DIR" "$MAIN_TEX_FILE"

        mkdir -p "$FINAL_PDF_OUTPUT_DIR"
        if [ -f "$TEMP_LATEX_OUTPUT_DIR/main.pdf" ]; then
          mv "$TEMP_LATEX_OUTPUT_DIR/main.pdf" "$FINAL_PDF_OUTPUT_DIR/$OUTPUT_PDF_NAME"
          echo "PDF successfully compiled and moved."
        else
          echo "Error: PDF compilation failed. No PDF file found at $TEMP_LATEX_OUTPUT_DIR/main.pdf."
          if [ -f "$TEMP_LATEX_OUTPUT_DIR/main.log" ]; then
            echo "Displaying contents of $TEMP_LATEX_OUTPUT_DIR/main.log:"
            cat "$TEMP_LATEX_OUTPUT_DIR/main.log"
          fi
          exit 1 
        fi

        latexmk -c -outdir="$TEMP_LATEX_OUTPUT_DIR" "$MAIN_TEX_FILE"
        rm -rf "$TEMP_LATEX_OUTPUT_DIR"

    - name: Copy generated PDFs into Jekyll site assets
      run: |
        JEKYLL_ASSETS_DIR="${{ github.workspace }}/${{ env.JEKYLL_ROOT }}/assets/solutions/"
        mkdir -p "$JEKYLL_ASSETS_DIR"
        PDF_TO_COPY="${{ github.workspace }}/generated-pdfs/aluffi-solutions-book.pdf"
        if [ -f "$PDF_TO_COPY" ]; then
          cp "$PDF_TO_COPY" "$JEKYLL_ASSETS_DIR"
          echo "PDF copied to Jekyll assets."
        else
          echo "Error: Compiled PDF not found at $PDF_TO_COPY. Cannot copy to Jekyll assets."
          exit 1 
        fi

    - name: Setup Ruby for Jekyll
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1' 
        bundler-cache: true 
        cache-version: 1    

    - name: List contents of Jekyll directory
      run: ls -lR
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Install Ruby Gems
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Diagnose Ruby/Jekyll Setup (Optional)
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of Gemfile.lock: $(ls Gemfile.lock || echo 'Gemfile.lock not found')"
        echo "Bundler version: $(bundle --version)"
        echo "Jekyll executable location: $(bundle exec which jekyll || echo 'Jekyll executable not found via bundle exec')"
        echo "PATH: $PATH"
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Build Jekyll site
      run: |
        echo "Attempting to build Jekyll site..."
        bundle exec jekyll build --trace
      working-directory: ${{ env.JEKYLL_ROOT }}

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ github.workspace }}/${{ env.JEKYLL_ROOT }}/_site
